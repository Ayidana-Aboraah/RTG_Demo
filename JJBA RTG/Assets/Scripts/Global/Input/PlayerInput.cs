//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Global/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""da00cdf8-e51f-4bf1-8587-3c5a2c0f5837"",
            ""actions"": [
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Button"",
                    ""id"": ""365b9b24-0465-4fbb-b623-9de853745e8b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""8c9db587-2fdb-47af-8edb-f618e32d940b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""0cb6edbc-59f4-42e2-8a57-105ec7ba9458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9624e12e-a6e1-468d-a9f4-bd6573ce3586"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Base Keyborad"",
                    ""id"": ""46152da7-3565-4026-9763-26af8ec90540"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""52292886-dcec-4d5a-a8e4-41c898222e23"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""cac56abd-fb03-4ba9-96bb-937ece099fab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Base Keyboard"",
                    ""id"": ""0ff60346-1716-4540-97bd-9ca42de286d1"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e59b6fe0-dd66-4dc7-9594-c3483d3eda49"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c452bba2-c1ba-468b-8a87-eadbcfcca1e8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3eb8ef83-9a52-49e2-8270-ce6594ac3b23"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df5ee037-d621-441d-9465-aa423ec50094"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Combat"",
            ""id"": ""5b46c8df-1ccf-419c-a3d9-8edffd1e8cb5"",
            ""actions"": [
                {
                    ""name"": ""Atk"",
                    ""type"": ""Button"",
                    ""id"": ""a7ef026d-d759-4beb-941f-f6eda643cd8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpAtk"",
                    ""type"": ""Button"",
                    ""id"": ""7d70cb10-b329-41c0-85c3-45198484ee44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Strong"",
                    ""type"": ""Button"",
                    ""id"": ""3f3e70cb-8058-45fa-bdcd-087412df3c85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heavy"",
                    ""type"": ""Button"",
                    ""id"": ""9e018487-4c26-419b-91e9-a299ee2e7c16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""ad2f388d-86b5-4d10-814d-dbf79173a1e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pose"",
                    ""type"": ""Button"",
                    ""id"": ""15ff9de6-cfc7-4ab4-b7b2-e6ef8771b825"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Summon"",
                    ""type"": ""Button"",
                    ""id"": ""5a3d8aa2-6a2a-4991-ba6e-9b9195eea642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""780250d1-1015-47d0-8393-0f74341aeaf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3607f66-7501-4d6b-b875-daa144de8aa7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""Atk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dae4401c-965d-4fe6-aa7f-62686a3bc97a"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""SpAtk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8964f153-d2b0-48b9-9a4c-bcc32c0cdb06"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""Strong"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f82f434d-91ca-4d8c-a962-551843d17a37"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""Heavy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""625b4726-b2c2-475c-b4e2-51df455cbe41"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Roblox"",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb39f033-4292-452d-b701-285f47b5975e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b9ab243-8e47-4575-b79b-dc231b9f080c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Summon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76f2a8db-592b-4665-a29e-9d97bff4df4d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""A"",
            ""id"": ""84628877-3252-4d17-95f6-0205ec8fcad0"",
            ""actions"": [
                {
                    ""name"": ""A1"",
                    ""type"": ""Button"",
                    ""id"": ""a4b02a0e-674f-4057-9d47-8fdb5b90e340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,Hold,MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A2"",
                    ""type"": ""Button"",
                    ""id"": ""9f473087-d192-4d6a-be5c-28e79466bcff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A3"",
                    ""type"": ""Button"",
                    ""id"": ""f58d938d-ea30-4d6c-9c3e-63bb2a5a369c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,Hold,MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A4"",
                    ""type"": ""Button"",
                    ""id"": ""7d661037-2b23-41e2-b263-762900c88847"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A5"",
                    ""type"": ""Button"",
                    ""id"": ""ef32afa4-d467-4de0-8739-e4f08a7babf8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A6"",
                    ""type"": ""Button"",
                    ""id"": ""72465017-2a83-4b55-93bf-14180ddc2d61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A7"",
                    ""type"": ""Button"",
                    ""id"": ""4894d91a-0e39-4d30-bbf0-bde1e1d7a27d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A8"",
                    ""type"": ""Button"",
                    ""id"": ""7b4294da-c646-419b-9680-9760fa9f730a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A9"",
                    ""type"": ""Button"",
                    ""id"": ""31ec6bc6-bb1b-49e6-800b-7295b015b681"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap,MultiTap,Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5062d27b-6488-4a23-99f3-22a83985d16d"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6201e1c-baac-4c34-b2c1-2f9e0bcfa882"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c3940d3-1262-4c91-8ab8-5c766e325bba"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d27cad6-e753-4611-adb8-ed7ce1c9d4a8"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b75f60e8-46ce-4c75-a1e3-84d3f5dc4be9"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e3c88f5-9cb5-47f2-a613-a4a7fd9b16cd"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b566afda-dacf-4dd7-8b6b-cd9f3daa0ac0"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d144a17-cd7f-4e30-a7a2-cdb76e619036"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""669753d8-0d6e-4492-ac5e-e5714a8b33f9"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""48a0ca0d-438b-4598-b9cb-e31e0fb30a7e"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f9ac339a-875c-4be4-a4b5-15e94cb304a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96860150-64bf-4354-ad3b-b65954830cb0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""465e00c9-83d3-46ea-8cd0-b75e4a1c3cd8"",
            ""actions"": [
                {
                    ""name"": ""MousePostition"",
                    ""type"": ""Value"",
                    ""id"": ""166c477f-22ae-444e-8a58-5c05b23b85cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6496c5f-7cef-4939-a4a8-7141ca7c663e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePostition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Roblox"",
            ""bindingGroup"": ""Roblox"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Base"",
            ""bindingGroup"": ""Base"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Horizontal = m_Movement.FindAction("Horizontal", throwIfNotFound: true);
        m_Movement_Vertical = m_Movement.FindAction("Vertical", throwIfNotFound: true);
        m_Movement_Dash = m_Movement.FindAction("Dash", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Atk = m_Combat.FindAction("Atk", throwIfNotFound: true);
        m_Combat_SpAtk = m_Combat.FindAction("SpAtk", throwIfNotFound: true);
        m_Combat_Strong = m_Combat.FindAction("Strong", throwIfNotFound: true);
        m_Combat_Heavy = m_Combat.FindAction("Heavy", throwIfNotFound: true);
        m_Combat_Block = m_Combat.FindAction("Block", throwIfNotFound: true);
        m_Combat_Pose = m_Combat.FindAction("Pose", throwIfNotFound: true);
        m_Combat_Summon = m_Combat.FindAction("Summon", throwIfNotFound: true);
        m_Combat_Focus = m_Combat.FindAction("Focus", throwIfNotFound: true);
        // A
        m_A = asset.FindActionMap("A", throwIfNotFound: true);
        m_A_A1 = m_A.FindAction("A1", throwIfNotFound: true);
        m_A_A2 = m_A.FindAction("A2", throwIfNotFound: true);
        m_A_A3 = m_A.FindAction("A3", throwIfNotFound: true);
        m_A_A4 = m_A.FindAction("A4", throwIfNotFound: true);
        m_A_A5 = m_A.FindAction("A5", throwIfNotFound: true);
        m_A_A6 = m_A.FindAction("A6", throwIfNotFound: true);
        m_A_A7 = m_A.FindAction("A7", throwIfNotFound: true);
        m_A_A8 = m_A.FindAction("A8", throwIfNotFound: true);
        m_A_A9 = m_A.FindAction("A9", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Pause = m_Menu.FindAction("Pause", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MousePostition = m_Camera.FindAction("MousePostition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Horizontal;
    private readonly InputAction m_Movement_Vertical;
    private readonly InputAction m_Movement_Dash;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Horizontal => m_Wrapper.m_Movement_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_Movement_Vertical;
        public InputAction @Dash => m_Wrapper.m_Movement_Dash;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Horizontal.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Vertical.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Dash.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnDash;
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Combat
    private readonly InputActionMap m_Combat;
    private ICombatActions m_CombatActionsCallbackInterface;
    private readonly InputAction m_Combat_Atk;
    private readonly InputAction m_Combat_SpAtk;
    private readonly InputAction m_Combat_Strong;
    private readonly InputAction m_Combat_Heavy;
    private readonly InputAction m_Combat_Block;
    private readonly InputAction m_Combat_Pose;
    private readonly InputAction m_Combat_Summon;
    private readonly InputAction m_Combat_Focus;
    public struct CombatActions
    {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Atk => m_Wrapper.m_Combat_Atk;
        public InputAction @SpAtk => m_Wrapper.m_Combat_SpAtk;
        public InputAction @Strong => m_Wrapper.m_Combat_Strong;
        public InputAction @Heavy => m_Wrapper.m_Combat_Heavy;
        public InputAction @Block => m_Wrapper.m_Combat_Block;
        public InputAction @Pose => m_Wrapper.m_Combat_Pose;
        public InputAction @Summon => m_Wrapper.m_Combat_Summon;
        public InputAction @Focus => m_Wrapper.m_Combat_Focus;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void SetCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterface != null)
            {
                @Atk.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @Atk.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @Atk.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnAtk;
                @SpAtk.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @SpAtk.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @SpAtk.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnSpAtk;
                @Strong.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnStrong;
                @Strong.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnStrong;
                @Strong.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnStrong;
                @Heavy.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnHeavy;
                @Heavy.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnHeavy;
                @Heavy.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnHeavy;
                @Block.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnBlock;
                @Block.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnBlock;
                @Block.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnBlock;
                @Pose.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Pose.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Pose.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnPose;
                @Summon.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Summon.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Summon.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnSummon;
                @Focus.started -= m_Wrapper.m_CombatActionsCallbackInterface.OnFocus;
                @Focus.performed -= m_Wrapper.m_CombatActionsCallbackInterface.OnFocus;
                @Focus.canceled -= m_Wrapper.m_CombatActionsCallbackInterface.OnFocus;
            }
            m_Wrapper.m_CombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Atk.started += instance.OnAtk;
                @Atk.performed += instance.OnAtk;
                @Atk.canceled += instance.OnAtk;
                @SpAtk.started += instance.OnSpAtk;
                @SpAtk.performed += instance.OnSpAtk;
                @SpAtk.canceled += instance.OnSpAtk;
                @Strong.started += instance.OnStrong;
                @Strong.performed += instance.OnStrong;
                @Strong.canceled += instance.OnStrong;
                @Heavy.started += instance.OnHeavy;
                @Heavy.performed += instance.OnHeavy;
                @Heavy.canceled += instance.OnHeavy;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @Pose.started += instance.OnPose;
                @Pose.performed += instance.OnPose;
                @Pose.canceled += instance.OnPose;
                @Summon.started += instance.OnSummon;
                @Summon.performed += instance.OnSummon;
                @Summon.canceled += instance.OnSummon;
                @Focus.started += instance.OnFocus;
                @Focus.performed += instance.OnFocus;
                @Focus.canceled += instance.OnFocus;
            }
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // A
    private readonly InputActionMap m_A;
    private IAActions m_AActionsCallbackInterface;
    private readonly InputAction m_A_A1;
    private readonly InputAction m_A_A2;
    private readonly InputAction m_A_A3;
    private readonly InputAction m_A_A4;
    private readonly InputAction m_A_A5;
    private readonly InputAction m_A_A6;
    private readonly InputAction m_A_A7;
    private readonly InputAction m_A_A8;
    private readonly InputAction m_A_A9;
    public struct AActions
    {
        private @PlayerInput m_Wrapper;
        public AActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A1 => m_Wrapper.m_A_A1;
        public InputAction @A2 => m_Wrapper.m_A_A2;
        public InputAction @A3 => m_Wrapper.m_A_A3;
        public InputAction @A4 => m_Wrapper.m_A_A4;
        public InputAction @A5 => m_Wrapper.m_A_A5;
        public InputAction @A6 => m_Wrapper.m_A_A6;
        public InputAction @A7 => m_Wrapper.m_A_A7;
        public InputAction @A8 => m_Wrapper.m_A_A8;
        public InputAction @A9 => m_Wrapper.m_A_A9;
        public InputActionMap Get() { return m_Wrapper.m_A; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AActions set) { return set.Get(); }
        public void SetCallbacks(IAActions instance)
        {
            if (m_Wrapper.m_AActionsCallbackInterface != null)
            {
                @A1.started -= m_Wrapper.m_AActionsCallbackInterface.OnA1;
                @A1.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA1;
                @A1.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA1;
                @A2.started -= m_Wrapper.m_AActionsCallbackInterface.OnA2;
                @A2.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA2;
                @A2.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA2;
                @A3.started -= m_Wrapper.m_AActionsCallbackInterface.OnA3;
                @A3.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA3;
                @A3.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA3;
                @A4.started -= m_Wrapper.m_AActionsCallbackInterface.OnA4;
                @A4.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA4;
                @A4.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA4;
                @A5.started -= m_Wrapper.m_AActionsCallbackInterface.OnA5;
                @A5.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA5;
                @A5.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA5;
                @A6.started -= m_Wrapper.m_AActionsCallbackInterface.OnA6;
                @A6.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA6;
                @A6.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA6;
                @A7.started -= m_Wrapper.m_AActionsCallbackInterface.OnA7;
                @A7.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA7;
                @A7.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA7;
                @A8.started -= m_Wrapper.m_AActionsCallbackInterface.OnA8;
                @A8.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA8;
                @A8.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA8;
                @A9.started -= m_Wrapper.m_AActionsCallbackInterface.OnA9;
                @A9.performed -= m_Wrapper.m_AActionsCallbackInterface.OnA9;
                @A9.canceled -= m_Wrapper.m_AActionsCallbackInterface.OnA9;
            }
            m_Wrapper.m_AActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A1.started += instance.OnA1;
                @A1.performed += instance.OnA1;
                @A1.canceled += instance.OnA1;
                @A2.started += instance.OnA2;
                @A2.performed += instance.OnA2;
                @A2.canceled += instance.OnA2;
                @A3.started += instance.OnA3;
                @A3.performed += instance.OnA3;
                @A3.canceled += instance.OnA3;
                @A4.started += instance.OnA4;
                @A4.performed += instance.OnA4;
                @A4.canceled += instance.OnA4;
                @A5.started += instance.OnA5;
                @A5.performed += instance.OnA5;
                @A5.canceled += instance.OnA5;
                @A6.started += instance.OnA6;
                @A6.performed += instance.OnA6;
                @A6.canceled += instance.OnA6;
                @A7.started += instance.OnA7;
                @A7.performed += instance.OnA7;
                @A7.canceled += instance.OnA7;
                @A8.started += instance.OnA8;
                @A8.performed += instance.OnA8;
                @A8.canceled += instance.OnA8;
                @A9.started += instance.OnA9;
                @A9.performed += instance.OnA9;
                @A9.canceled += instance.OnA9;
            }
        }
    }
    public AActions @A => new AActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Pause;
    public struct MenuActions
    {
        private @PlayerInput m_Wrapper;
        public MenuActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_Menu_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_MousePostition;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePostition => m_Wrapper.m_Camera_MousePostition;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @MousePostition.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePostition;
                @MousePostition.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePostition;
                @MousePostition.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMousePostition;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePostition.started += instance.OnMousePostition;
                @MousePostition.performed += instance.OnMousePostition;
                @MousePostition.canceled += instance.OnMousePostition;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_RobloxSchemeIndex = -1;
    public InputControlScheme RobloxScheme
    {
        get
        {
            if (m_RobloxSchemeIndex == -1) m_RobloxSchemeIndex = asset.FindControlSchemeIndex("Roblox");
            return asset.controlSchemes[m_RobloxSchemeIndex];
        }
    }
    private int m_BaseSchemeIndex = -1;
    public InputControlScheme BaseScheme
    {
        get
        {
            if (m_BaseSchemeIndex == -1) m_BaseSchemeIndex = asset.FindControlSchemeIndex("Base");
            return asset.controlSchemes[m_BaseSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICombatActions
    {
        void OnAtk(InputAction.CallbackContext context);
        void OnSpAtk(InputAction.CallbackContext context);
        void OnStrong(InputAction.CallbackContext context);
        void OnHeavy(InputAction.CallbackContext context);
        void OnBlock(InputAction.CallbackContext context);
        void OnPose(InputAction.CallbackContext context);
        void OnSummon(InputAction.CallbackContext context);
        void OnFocus(InputAction.CallbackContext context);
    }
    public interface IAActions
    {
        void OnA1(InputAction.CallbackContext context);
        void OnA2(InputAction.CallbackContext context);
        void OnA3(InputAction.CallbackContext context);
        void OnA4(InputAction.CallbackContext context);
        void OnA5(InputAction.CallbackContext context);
        void OnA6(InputAction.CallbackContext context);
        void OnA7(InputAction.CallbackContext context);
        void OnA8(InputAction.CallbackContext context);
        void OnA9(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMousePostition(InputAction.CallbackContext context);
    }
}
